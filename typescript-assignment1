const Num: number[] = [1, 2, 3, 4, 5, 6];
const Strings: string[] = ["hello", "World"];
const Booleans: boolean[] = [true, false];
const mix: (number | string)[] = [1, "hello", 2, "world"];

let fruits: string[] = ["apple", "banana", "mango"];
fruits.push("grapes");
fruits.shift();
fruits.splice(2, 0, "pineapple");
fruits.reverse();
console.log(fruits);

let numbers: number[] = [10, 20, 30, 40, 50, 60];
let doubled: number[] = numbers.map(num => num * 2);
let filtered: number[] = doubled.filter(num => num < 50);
let sum: number = filtered.reduce((acc, num) => acc + num, 0);
console.log(sum);

let values: number[] = [10, 20, 30, 40, 50];
let result: number | undefined = values.find(num => num > 25);
console.log(result);
let index: number = values.indexOf(40);
console.log(index);

let scores: number[] = [55, 23, 87, 12, 99, 38];
let ascending = [...scores].sort((a, b) => a - b);
let descending = [...scores].sort((a, b) => b - a);
console.log(ascending, descending);

let student: [string, number, boolean] = ["John", 21, true];
student[1] = 22;
console.log(student);

let roles: string[] = ["User", "Editor", "Admin", "Moderator"];
let hasAdmin: boolean = roles.includes("Admin");
let hasSuper: boolean = roles.some(role => role.startsWith("Super"));
console.log(hasAdmin, hasSuper);

let nestedArray: (number | number[])[] = [1, [2, 3], [4, [5, 6]]];
let flattenedArray = nestedArray.flat(Infinity);
console.log(flattenedArray);

let arr1: number[] = [1, 2, 3, 4];
let arr2: number[] = [3, 4, 5, 6];
let uniqueArray: number[] = [...new Set([...arr1, ...arr2])];
console.log(uniqueArray);

interface Employee {
  name: string;
  age: number;
  position: string;
}

let employees: Employee[] = [
  { name: "jp", age: 28, position: "Developer" },
  { name: "rs", age: 35, position: "Manager" },
  { name: "ns", age: 40, position: "Tester" },
  { name: "fz", age: 25, position: "Intern" }
];

let filteredEmployees: Employee[] = employees.filter(emp => emp.age > 30);
console.log(filteredEmployees);
